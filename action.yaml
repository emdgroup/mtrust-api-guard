name: "M-Trust API Documentation Generator and Version Validator"
description: "Validates API documentation and version changes in Dart projects."
author: "emdgroup"

inputs:
  src_path:
    description: 'Source path to generate the documentation'
    required: true
    default: "./lib"
  base_doc:
    description: 'Path / ref to base documentation.dart file'
    required: true
    default: "origin/main:documentation.g.dart"
  new_doc:
    description: 'Path to new documentation.dart file'
    required: true
    default: "documentation.g.dart"
  new_version:
    description: 'New version to be validated'
    required: true
  comment_on_pr:
    description: 'Whether to add comments to the PR with API changes'
    required: false
    default: 'true'
  pr_comment_message:
    description: 'Custom message template for PR comments. Use {version} and {changelog} as placeholders.'
    required: false
    default: "New version {version} 🚀\n\nDetected API changes:\n{changelog}"
  fail_on_error:
    description: 'Whether to fail the workflow on error'
    required: false
    default: 'true'

outputs:
  api_change_type:
    description: 'Detected API change type (major, minor, patch)'
    value: ${{ steps.detect_change_type.outputs.api_change_type }}
  api_changelog:
    description: 'Generated API changelog'
    value: ${{ steps.detect_change_type.outputs.api_changelog }}
  validation_passed:
    description: 'Whether the version validation passed'
    value: ${{ steps.validate_version.outputs.validation_passed }}

runs:
  using: "composite"
  steps:
    - name: Checkout repo
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install M-Trust API Guard from Git
      shell: bash
      run: dart pub global activate --source git https://github.com/emdgroup/mtrust-api-guard.git

    - name: Generate new API docs
      shell: bash
      run: |
        $HOME/.pub-cache/bin/mtrust_api_guard generate \
          --path ${{ inputs.src_path }} \
          --output ${{ inputs.new_doc }} || if [[ "${{ inputs.fail_on_error }}" == "true" ]]; then exit 1; else echo "Ignoring error as fail_on_error is false"; fi

    - name: Run API change type detection
      id: detect_change_type
      shell: bash
      run: |
        set +e  # Don't exit on error
        API_CHANGELOG=$($HOME/.pub-cache/bin/mtrust_api_guard compare \
          --base ${{ inputs.base_doc }} \
          --new ${{ inputs.new_doc }} \
          --magnitude patch)
        COMPARE_EXIT_CODE=$?
        set -e  # Resume exit on error
        
        if [[ $COMPARE_EXIT_CODE -ne 0 && "${{ inputs.fail_on_error }}" == "true" ]]; then
          echo "Error in API comparison and fail_on_error is true"
          exit $COMPARE_EXIT_CODE
        fi
        
        API_CHANGE_TYPE=$(echo "$API_CHANGELOG" | head -n 1 | grep -oE "major|minor|patch" || echo "patch")
        echo "api_change_type=$API_CHANGE_TYPE" >> $GITHUB_OUTPUT
        echo "api_changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$API_CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo "API_CHANGE_TYPE=$API_CHANGE_TYPE" >> $GITHUB_ENV
        {
          echo 'API_CHANGELOG<<EOF'
          echo "$API_CHANGELOG"
          echo EOF
        } >> "$GITHUB_ENV"

    - name: Get previous version
      id: get_previous_version
      shell: bash
      run: |
        PREVIOUS_VERSION=$(grep 'version:' pubspec.yaml | sed 's/version: //')
        if [[ -z "$PREVIOUS_VERSION" && "${{ inputs.fail_on_error }}" == "true" ]]; then
          echo "Could not determine previous version and fail_on_error is true"
          exit 1
        elif [[ -z "$PREVIOUS_VERSION" ]]; then
          echo "Could not determine previous version, using 0.0.0 as default"
          PREVIOUS_VERSION="0.0.0"
        fi
        echo "PREVIOUS_VERSION=$PREVIOUS_VERSION" >> $GITHUB_ENV

    - name: Validate version bump
      id: validate_version
      shell: bash
      run: |
        IFS='.' read -r OLD_MAJOR OLD_MINOR OLD_PATCH <<< "$PREVIOUS_VERSION"
        IFS='.' read -r NEW_MAJOR NEW_MINOR NEW_PATCH <<< "${{ inputs.new_version }}"
        
        if [[ "$NEW_MAJOR" -gt "$OLD_MAJOR" ]]; then
          DETECTED_CHANGE="major"
        elif [[ "$NEW_MINOR" -gt "$OLD_MINOR" ]]; then
          DETECTED_CHANGE="minor"
        else
          DETECTED_CHANGE="patch"
        fi
        echo "Expected: At least $API_CHANGE_TYPE | Detected: $DETECTED_CHANGE"
        
        PRIORITY_MAP=("patch" "minor" "major")
        for i in "${!PRIORITY_MAP[@]}"; do
          [[ "${PRIORITY_MAP[$i]}" == "$API_CHANGE_TYPE" ]] && EXPECTED_INDEX=$i
          [[ "${PRIORITY_MAP[$i]}" == "$DETECTED_CHANGE" ]] && DETECTED_INDEX=$i
        done
        if [[ "$DETECTED_INDEX" -lt "$EXPECTED_INDEX" ]]; then
          echo "❌ Version bump mismatch! Expected at least $API_CHANGE_TYPE, but detected $DETECTED_CHANGE."
          echo "validation_passed=false" >> $GITHUB_OUTPUT
          if [[ "${{ inputs.fail_on_error }}" == "true" ]]; then
            exit 1
          else
            echo "Not failing the workflow as fail_on_error is false"
          fi
        else
          echo "✅ Version bump is correct."
          echo "validation_passed=true" >> $GITHUB_OUTPUT
        fi

    - name: Delete old comment in PR (if exists)
      if: ${{ inputs.comment_on_pr == 'true' }}
      uses: thollander/actions-comment-pull-request@v3
      with:
        comment-tag: api_guard_comment
        mode: delete

    - name: Prepare PR comment content
      if: ${{ inputs.comment_on_pr == 'true' }}
      shell: bash
      run: |
        # Create the comment by replacing placeholders
        COMMENT="${{ inputs.pr_comment_message }}"
        COMMENT="${COMMENT/\{version\}/${{ inputs.new_version }}}"
        COMMENT="${COMMENT/\{changelog\}/${{ env.API_CHANGELOG }}}"
        echo "PR_COMMENT<<EOF" >> $GITHUB_ENV
        echo "$COMMENT" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Comment on PR with new version and API changelog
      if: ${{ inputs.comment_on_pr == 'true' }}
      uses: thollander/actions-comment-pull-request@v3
      with:
        comment-tag: api_guard_comment
        message: ${{ env.PR_COMMENT }}


branding:
  icon: "shield"
  color: "blue"