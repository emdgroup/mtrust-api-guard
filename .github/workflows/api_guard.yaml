name: API Documentation Generator and Version Validator

on:
  workflow_call:
    inputs:
      src_path:
        description: 'Source path to generate the documentation'
        required: true
        type: string
        default: "./lib"
      base_doc:
        description: 'Path / ref to base documentation.dart file'
        required: true
        type: string
        default: "origin/main:./lib/documentation.dart"
      new_doc:
        description: 'Path to new documentation.dart file'
        required: true
        type: string
        default: "./lib/documentation.dart"
      new_version:
        description: 'New version to be validated'
        required: true
        type: string

jobs:
  validate_version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: emdgroup/mtrust-api-guard
          ref: main
          path: mtrust-api-guard

      - name: Install Dart
        uses: dart-lang/setup-dart@v1

      - name: Generate new API docs
        run: |
          dart ./mtrust-api-guard/bin/mtrust_api_guard.dart generate \
            --path ${{ inputs.src_path }} \
            --output ${{ inputs.new_doc }}

      - name: Run API change type detection
        id: detect_change_type
        run: |
          API_CHANGELOG=$(dart ./mtrust-api-guard/bin/mtrust_api_guard.dart compare \
            --base ${{ inputs.base_doc }} \
            --new ${{ inputs.new_doc }} \
            --magnitude patch)

          API_CHANGE_TYPE=$(echo "$API_CHANGELOG" | head -n 1 | grep -oE "major|minor|patch")
          echo "API_CHANGE_TYPE=$API_CHANGE_TYPE" >> $GITHUB_ENV
          {
            echo 'API_CHANGELOG<<EOF'
            echo "$API_CHANGELOG"
            echo EOF
          } >> "$GITHUB_ENV"

      - name: Get previous version
        id: get_previous_version
        run: |
          PREVIOUS_VERSION=$(grep 'version:' pubspec.yaml | sed 's/version: //')
          echo "PREVIOUS_VERSION=$PREVIOUS_VERSION" >> $GITHUB_ENV

      - name: Validate version bump
        id: validate_version
        run: |
          IFS='.' read -r OLD_MAJOR OLD_MINOR OLD_PATCH <<< "$PREVIOUS_VERSION"
          IFS='.' read -r NEW_MAJOR NEW_MINOR NEW_PATCH <<< "${{ inputs.new_version }}"
          
          if [[ "$NEW_MAJOR" -gt "$OLD_MAJOR" ]]; then
            DETECTED_CHANGE="major"
          elif [[ "$NEW_MINOR" -gt "$OLD_MINOR" ]]; then
            DETECTED_CHANGE="minor"
          else
            DETECTED_CHANGE="patch"
          fi

          echo "Expected: At least $API_CHANGE_TYPE | Detected: $DETECTED_CHANGE"
          
          PRIORITY_MAP=("patch" "minor" "major")
          for i in "${!PRIORITY_MAP[@]}"; do
            [[ "${PRIORITY_MAP[$i]}" == "$API_CHANGE_TYPE" ]] && EXPECTED_INDEX=$i
            [[ "${PRIORITY_MAP[$i]}" == "$DETECTED_CHANGE" ]] && DETECTED_INDEX=$i
          done

          if [[ "$DETECTED_INDEX" -lt "$EXPECTED_INDEX" ]]; then
            echo "❌ Version bump mismatch! Expected at least $API_CHANGE_TYPE, but detected $DETECTED_CHANGE."
            exit 1
          else
            echo "✅ Version bump is correct."
          fi

      - name: Delete old comment in PR (if exists)
        uses: thollander/actions-comment-pull-request@v3
        with:
          comment-tag: api_guard_comment
          mode: delete

      - name: Comment on PR with new version and API changelog
        uses: thollander/actions-comment-pull-request@v3
        with:
          comment-tag: api_guard_comment
          message: "New version ${{ input.new_version }} 🚀\n\nDetected API changes:\n${{ env.API_CHANGELOG }}"
